#!/usr/bin/env python
import subprocess
import sys
import traceback

import colorama

import data_model.context

HELP_MESSAGE = """\
Set up the environment for the PLANSPIEL single-server application.

Usage:
setup_environment [--create-temporary-persistence] [--help]

Parameters:
--create-temporary-persistence: 
If this flag is specified, a new docker container is created that temporarily persists the mysql database.

--help:
Only show this help message.\
"""


DOCKER_CONTAINER_NAME = "planspiel_tmp_mysql_backend"


def parse_cli_arguments() -> bool:
    """
    Parse the provided CLI arguments and potentially print the help message and exit immediately.
    :return: Whether a docker container for persisting the mysql database should be created.
    """

    print_help = None
    error = 0
    create_tmp = None
    for p in sys.argv[1:]:
        if p == "--create-temporary-persistence":
            if create_tmp is None:
                create_tmp = True
            else:
                print("Syntax Error: A flag can only be provided once.")
                error = -1
                print_help = True
                break
        elif p == "--help":
            if print_help is None:
                print_help = True
            else:
                print("Syntax Error: A flag can only be provided once.")
                error = -1
                print_help = True
                break
        else:
            print(f"Syntax Error: Unknown option: {p}")
            error = -1
            print_help = True
            break

    if print_help is None:
        print_help = False
    if create_tmp is None:
        create_tmp = False

    if print_help:
        print(HELP_MESSAGE)
        exit(error)
    return create_tmp


def check_docker_available() -> bool:
    try:
        # Run the `docker --version` command to check Docker's availability
        result = subprocess.run(
            ["docker", "--version"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        if result.returncode == 0:
            print(f"Docker is available. Version: {result.stdout.strip()}")
            return True
        else:
            print(f"Docker seems to be installed but returned an error: {result.stderr.strip()}")
    except FileNotFoundError:
        print("Docker is not installed or not in the system PATH.")
    except Exception:
        print("An unexpected error occurred. Please try again.")

    return False


if __name__ == "__main__":
    create_tmp = parse_cli_arguments()

    # Setup docker backend
    if create_tmp:
        print("Checking whether Docker is available...")
        if not check_docker_available():
            exit(-1)

        print("Assure container is available...")

    # Establish database connection
    print("Establishing test connection to database...")
    try:
        data_model.context.initialize_db_context("localhost", 3306, "mydatabase", "admin", "admin")
        print("Initialized connection successfully.")
    except:
        print("The database is currently not available. More info:")
        print(colorama.Fore.LIGHTBLACK_EX + "\n".join(map(lambda l: f"\t{l}", traceback.format_exc().splitlines())) + colorama.Style.RESET_ALL)
        exit(-1)

    print("Closing test connection...")
    data_model.context.close_db_context()

    print(f"\n{colorama.Fore.CYAN}Environment is ready.{colorama.Style.RESET_ALL}")
